using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace Endless
{
    public static partial class Generate
    {
        /// <summary>
        /// Creates an infinite list where all items are the first argument.
        /// </summary>
        /// <returns>IEnumerable of: seed, seed, seed, seed, ...</returns>
        [SuppressMessage("ReSharper", "IteratorNeverReturns")]
        public static IEnumerable<T> Repeat<T>(this T seed)
        {
            while (true)
                yield return seed;
        }

        /// <summary>
        /// Creates an infinite list where all items are generated by the given function.
        /// </summary>
        /// <returns>IEnumerable of: func(), func(), func(), func(), ...</returns>
        public static IEnumerable<T> Repeat<T>(this Func<T> func)
        {
            if (func == null) throw new ArgumentNullException(nameof(func));

            while (true)
                yield return func();
        }
    }
}