using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Endless
{
    /// <summary>
    /// Extensions that help to generate infinite collections (endless IEnumerables)
    /// </summary>
    public static class Generate
    {
        /// <summary>
        /// Creates IEnumerable containing one item
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="item"></param>
        /// <returns></returns>
        public static IEnumerable<T> Yield<T>(this T item)
        {
            yield return item;
        }

        /// <summary>
        /// Creates an infinite list where the first item is calculated by applying the function on the second argument,
        /// the second item by applying the function on the previous result and so on.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="seed"></param>
        /// <param name="func"></param>
        /// <returns>IEnumerable of: seed, func(seed), func(func(seed)), ...</returns>
        public static IEnumerable<T> Iterate<T>(this T seed, Func<T, T> func)
        {
            if (func == null) throw new ArgumentNullException("func");

            while (true)
            {
                yield return seed;
                seed = func(seed);
            }
        }

        /// <summary>
        /// Creates an infinite list where all items are the first argument.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="seed"></param>
        /// <returns>IEnumerable of: seed, seed, seed, seed, ...</returns>
        public static IEnumerable<T> Repeat<T>(this T seed)
        {
            while (true)
                yield return seed;
        }

        /// <summary>
        /// Creates an infinite list where all items are generated by the given function.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="func"></param>
        /// <returns>IEnumerable of: func(), func(), func(), func(), ...</returns>
        public static IEnumerable<T> Repeat<T>(this Func<T> func)
        {
            while (true)
                yield return func();
        }

        /// <summary>
        /// Creates a circular list from a finite one.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="values"></param>
        /// <returns></returns>
        public static IEnumerable<T> Cycle<T>(this IEnumerable<T> values)
        {
            while (true)
            {
                if (values.Empty())
                    yield break;

                foreach (T item in values)
                    yield return item;
            }
        }
    }
}